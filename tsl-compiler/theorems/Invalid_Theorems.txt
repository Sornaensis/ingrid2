{
    "theorems":[
{
            "text": "edges <= maxb(nodes)*(maxb(nodes)-(1.0))/2.0-((minb(mindeg)-(maxb(nodeConnec))+1.0)*(maxb(nodes)-(minb(mindeg))-(1.0)));
nodes >= maxb(mindeg)-(maxb(nodeConnec))+sqrt(8.0*minb(edges)-(4.0*maxb(mindeg)**2.0)-(4.0*maxb(mindeg))+4.0*maxb(nodeConnec)**2.0-(4.0*maxb(nodeConnec))+1.0)/2.0+3.0/2.0;
mindeg <= maxb(nodeConnec)/2.0+maxb(nodes)/2.0+sqrt(4.0*minb(edges)+maxb(nodeConnec)**2.0-(2.0*maxb(nodeConnec)*maxb(nodes))-(maxb(nodes)**2.0)+2.0*maxb(nodes))/2.0-(1.0);
nodeConnec >= (-(minb(edges))+minb(mindeg)**2.0-(minb(mindeg)*minb(nodes))+2.0*minb(mindeg)+minb(nodes)**2.0/2.0-(3.0*minb(nodes)/2.0)+1.0)/(minb(mindeg)-(minb(nodes))+1.0);
",
            "name": "Theorem",
            "idnum": 331,
            "disp": "Too many wierd conditions"
        },
        {
            "text": "let u = floor((nodes - mindeg - 3)/(mindeg+1)**2); let k = floor((floor((nodes - u*(mindeg+1)**2)/(mindeg+2)-1))/2); if mindeg <= maxdeg - 2 and nodes < maxdeg + mindeg then {edgeInd >= minimum(floor(nodes/2), mindeg)} else if mindeg <= maxdeg - 2 and nodes >= maxdeg + mindeg then {edgeInd >= ceil(nodes*mindeg/(mindeg+maxdeg))} else if (mindeg == maxdeg and even mindeg) or (mindeg == maxdeg - 1 and odd mindeg) then {edgeInd >= ceil(nodes*maxdeg/(2*(maxdeg+1)))} else if mindeg == maxdeg - 1 then {edgeInd >= ceil((nodes*mindeg+1)/(2*(mindeg+1)))} else if (mindeg == maxdeg and odd mindeg) and nodes == mindeg + 1 then {edgeInd >= nodes/2} else if (mindeg == maxdeg and odd mindeg) and nodes > mindeg + 1 then {edgeInd >= (nodes-u*(mindeg-1))/2-k};",
            "name": "Theorem",
            "idnum": 86,
            "disp": ""
        },
{
            "text": "if maxClique == 2 then {nodeCover <= nodes *(1 - ((2*edges)/nodes * log(2*edges/nodes) - (2*edges/nodes) +1)/(2*edges/nodes -1)**2)};",
            "name": "Theorem",
            "idnum": 442,
            "disp": "This one probably wont be in the final ingrid"
        },
{
            "text": "if not forest then {bandwidth >= (2*nodeCover*(girth - 2) - nodes*(girth-3))/(2*(nodes-nodeCover))};",
            "name": "Theorem",
            "idnum": 422,
            "disp": "Does the different bounds thing for bandwidth"
        },
{
            "text": "if diameter == 2 and nodeConnec >= 3 then { edges >= (nodes-1)*(nodeConnec+1)/(2 - nodeConnec**2 + 2*nodeConnec) : useMaxFor(nodeConnec)};",
            "name": "Theorem",
            "idnum": 363,
            "disp": "They use do some strange things with setting minimum with different bounds"
        },
{
            "text": "if connected and regular and mindeg <= 4 and not complete and (nodes == 7 or istrue congruent(nodes, 3, 5)) and ((nodes > 13 or nodes < 13) and (nodes > 18 or nodes < 18)) then {edgeCliqueCover >= floor((3*nodes+4)/5) + 1} else if connected and regular and mindeg <= 4 and not complete then {edgeCliqueCover >= floor((3*nodes+4)/5)};",
            "name": "Theorem",
            "idnum": 322,
            "disp": "Uses Congruence, should be checked over"
        }
        ]
}

